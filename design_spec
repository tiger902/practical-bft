Server ID, called m
- a number in the range (0, R] where R is the total number of servers

R
- the number of servers that make up the system

F
- the number of servers that can fail plus the number of malicious servers that can be tolerated by the system

R = 3F + 1



Roadmap
1. Have a full protocol using labrpc and no crypography
2. Add crypography
3. Test locally and make sure it works
4. Supporting the truncation of the logs
5. Implement the buffer for the commands
6. Implement the h and H for the protocol
7. Test locally and make sure it works
8. Add optimization -- make a new branch for this
9. Implement network RPC
10. Test on the network
11. Transport layer? For the summer? I don't know!!!


TODO: Later
1. Adding and removing servers
2. Adding the different transport layers ... this is hard and advance, so might not need
3. Adding crypography for the message
4. Resend RPCs on network failure

TODO: now 
- make sure the hash works as needed for both structs and interfaces
- 

Changes to the protocol
- if it does not match, get state from the leader what if the leader is malicious?
- maybe get state from the other 2f + 1 replicas and then continue with that, Implement this optimization


Evaluation 
- how does performance change with the increase in the number of servers
- how does performance change with the increase in the number of clients
- what is the latency for the read and write when we change certain parameters


Our own changes
- We do not have the maximum and the high and low marks
- No seperation between the network and tranport layers
- 

Design choices
- RSA and public crypo
- no resending of packets using RPCs


Borrowed code
- hashing, used the unint64 package from git
- persistent stuff


Make sure
- add the state stuff for all the other RPC helpers to make sure that they are not accepting the messages when we are
  performaning a view change
- change the preprepare massage to make sure that it supports the onion layer we want 
- make sure that the commands of the arguments are all filled in for the logEntry
- make sure that the we save the relevent stuff for the log entry
- delete ViewChange in the log when we became a leader or when we are at a view > view + 100 something from the leader
- change Digest to take an interface not an int, so that it can support no-ops


- changed the view change Implement for updating the replicas 

