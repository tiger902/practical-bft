Server ID, called m
- a number in the range (0, R] where R is the total number of servers

R
- the number of servers that make up the system

F
- the number of servers that can fail plus the number of malicious servers that can be tolerated by the system

R = 3F + 1



Roadmap
1. Have a full protocol using labrpc and no crypography
2. Add crypography
3. Test locally and make sure it works
4. Supporting the truncation of the logs
5. Implement the buffer for the commands
6. Implement the h and H for the protocol
7. Test locally and make sure it works
8. Add optimization -- make a new branch for this
9. Implement network RPC
10. Test on the network
11. Transport layer? For the summer? I don't know!!!


TODO:
1. Adding and removing servers
2. Adding the different transport layers ... this is hard and advance, so might not need
3. Adding crypography for the message

Changes to the protocol
- if it does not match, get state from the leader what if the leader is malicious?
- maybe get state from the other 2f + 1 replicas and then continue with that, Implement this optimization


Evaluation 
- how does performance change with the increase in the number of servers
- how does performance change with the increase in the number of clients
- what is the latency for the read and write when we change certain parameters

